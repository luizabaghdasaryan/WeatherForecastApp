// <auto-generated />
using System;
using DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccess.Migrations
{
    [DbContext(typeof(WeatherForecastDbContext))]
    partial class WeatherForecastDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Entities.DailyForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date")
                        .HasColumnName("Date");

                    b.Property<int>("MaxTemperature")
                        .HasColumnType("int")
                        .HasColumnName("MaxTemperature");

                    b.Property<int>("MinTemperature")
                        .HasColumnType("int")
                        .HasColumnName("MinTemperature");

                    b.Property<int>("RegionId")
                        .HasColumnType("int")
                        .HasColumnName("RegionId");

                    b.Property<int>("SummaryId")
                        .HasColumnType("int")
                        .HasColumnName("SummaryId");

                    b.HasKey("Id");

                    b.HasIndex("RegionId");

                    b.HasIndex("SummaryId");

                    b.HasIndex("Date", "RegionId")
                        .IsUnique();

                    b.ToTable("DailyForecast");
                });

            modelBuilder.Entity("DataAccess.Entities.HourlyForecast", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ForecastId")
                        .HasColumnType("int")
                        .HasColumnName("ForecastId");

                    b.Property<int>("Hour")
                        .HasColumnType("int")
                        .HasColumnName("Hour");

                    b.Property<int>("TemperatureC")
                        .HasColumnType("int")
                        .HasColumnName("TemperatureC");

                    b.HasKey("Id");

                    b.HasIndex("ForecastId", "Hour")
                        .IsUnique();

                    b.ToTable("HourlyForecast");
                });

            modelBuilder.Entity("DataAccess.Entities.Region", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.Property<int?>("TerrainType")
                        .HasColumnType("int")
                        .HasColumnName("TerrainType");

                    b.HasKey("Id");

                    b.ToTable("Region");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Shirak"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Kotayk",
                            TerrainType = 0
                        },
                        new
                        {
                            Id = 3,
                            Name = "Kotayk",
                            TerrainType = 1
                        },
                        new
                        {
                            Id = 4,
                            Name = "Gegharkunik"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Lori"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Tavush"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Aragatsotn",
                            TerrainType = 0
                        },
                        new
                        {
                            Id = 8,
                            Name = "Aragatsotn",
                            TerrainType = 1
                        },
                        new
                        {
                            Id = 9,
                            Name = "Ararat"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Armavir"
                        },
                        new
                        {
                            Id = 11,
                            Name = "Vayots Dzor",
                            TerrainType = 0
                        },
                        new
                        {
                            Id = 12,
                            Name = "Vayots Dzor",
                            TerrainType = 1
                        },
                        new
                        {
                            Id = 13,
                            Name = "Syunik",
                            TerrainType = 2
                        },
                        new
                        {
                            Id = 14,
                            Name = "Syunik",
                            TerrainType = 1
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.Summary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Summary");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Freezing"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Bracing"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Chilly"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Cool"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Mild"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Warm"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Balmy"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Hot"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Sweltering"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Scorching"
                        });
                });

            modelBuilder.Entity("DataAccess.Entities.DailyForecast", b =>
                {
                    b.HasOne("DataAccess.Entities.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccess.Entities.Summary", "Summary")
                        .WithMany()
                        .HasForeignKey("SummaryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Region");

                    b.Navigation("Summary");
                });

            modelBuilder.Entity("DataAccess.Entities.HourlyForecast", b =>
                {
                    b.HasOne("DataAccess.Entities.DailyForecast", "Forecast")
                        .WithMany("HourlyForecasts")
                        .HasForeignKey("ForecastId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Forecast");
                });

            modelBuilder.Entity("DataAccess.Entities.DailyForecast", b =>
                {
                    b.Navigation("HourlyForecasts");
                });
#pragma warning restore 612, 618
        }
    }
}
